Skills for player skill tree and skill points maby something like perception that adjusts how far player sees other creatures/enemies maby kinda campman skill that effects when player sens animals and how often player can flee from encounter and so one
passive skills one handed two handed shield wielding and striking etc that grow over fights to to some maks cap that effects combat and so one

**Prompt start**
Project engineering prompt (guidelines to enforce JSDoc, reusable functions, modularization, and smoke-test review)
- Documentation
  - Add concise JSDoc at the top of each module and for exported or non-trivial functions.
  - Document ctx expectations (inputs, outputs, side effects) where relevant.
- Reuse and modularization
  - Prefer small, focused modules and reusable helpers over ad-hoc code.
  - Centralize generic helpers (round1, clamp, pickWeighted, randFloat) in a shared utils (e.g., ctx.utils or PlayerUtils) and reuse them.
  - Avoid direct window.* lookups; use the module handles provided on ctx (via Ctx.create).
- Code quality
  - Follow existing patterns (naming, map[y][x], TILE/COLS/ROWS, minimal error handling).
  - Use ctx.rng for determinism in randomness-heavy code (or accept rng param); avoid Math.random in core gameplay.
  - Keep code minimal, readable, and consistent.
- Simulation and review after changes
  - Smoke-test in browser: generate a level, move, fight, loot, open/close inventory, descend.
  - Verify FOV/camera behavior and ensure no console errors/warnings.
  - If UI changed, include a short clip or screenshots and a deployment link.
- PR checklist (tick all)
  - [ ] JSDoc updated where applicable
  - [ ] Reused/centralized helpers (no duplicated logic)
  - [ ] No new window.* references (using ctx instead)
  - [ ] Randomness uses ctx.rng or injected rng param
  - [ ] Smoke test passes; browser console is clean
  - [ ] Summary, rationale, affected files, and test steps included
  **Prompt end**